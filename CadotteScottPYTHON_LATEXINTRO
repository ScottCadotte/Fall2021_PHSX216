{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "4ba8908f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.25\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "def rule1(errA,c):\n",
    "    dQ=c*(errA)\n",
    "    return dQ\n",
    "\n",
    "errA=.05\n",
    "c=5\n",
    "\n",
    "dQ=rule1(errA, c)\n",
    "print (dQ)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "261f2b4b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "dQ= 4.800000000000001\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "def rule2(m,c,A,errA):\n",
    "    dQ=(c*m*A**(m-1))*errA\n",
    "    return dQ\n",
    "        \n",
    "m= 2\n",
    "c= 5       \n",
    "A= 2.4\n",
    "errA= .2\n",
    "\n",
    "dQ=rule2(m,c,A,errA)\n",
    "print (\"dQ=\", dQ)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "b8d573f6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "dQ 0.01414213562373095\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "def rule3(m,errA,errB):\n",
    "    dQ= np.sqrt(errA**2+errB**2)\n",
    "    return dQ\n",
    "\n",
    "m= 2\n",
    "A=1.2\n",
    "B=1.3\n",
    "errA=.01\n",
    "errB=.01\n",
    "\n",
    "dQ=rule3(m,errA,errB)\n",
    "print(\"dQ\",dQ)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "a4d80b44",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "dQ= 0.020604380714501647\n"
     ]
    }
   ],
   "source": [
    "#this is my uncertainty for initial velocity\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "def rule4(c,A,n,B,m,Q,errA,errB):\n",
    "    dQ=(Q*(np.sqrt(m*(errA/A))**2+(n*(errB/B))**2))\n",
    "    return dQ\n",
    "\n",
    "c=0\n",
    "A=103.44\n",
    "n=.5\n",
    "B=99\n",
    "m=1\n",
    "Q=2.3\n",
    "errA=0.926\n",
    "errB=0.5\n",
    "dQ=rule4(c,A,n,B,m,Q,errA,errB)\n",
    "\n",
    "print(\"dQ=\",dQ)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "18d7165e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "standard devx= 0.17950549357115014\n",
      "xmean= 1.1166666666666667\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "\n",
    "x =np.array([1.1,1.3,1.4,0.90,.95,1.05])\n",
    "std_x=np.std(x)\n",
    "print (\"standard devx=\", std_x)\n",
    "xmean=np.average(x)\n",
    "print (\"xmean=\",xmean)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "03ff23f9",
   "metadata": {},
   "source": [
    "$\\delta Q = \\sqrt{(\\delta A)^2+(\\delta B)^2}$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d9b7ede1",
   "metadata": {},
   "source": [
    "$\\delta v_{i}= 2.3 = \\sqrt{(.926/103.44)^2+( .5(.5)/99))^2}$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "138122e4",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
